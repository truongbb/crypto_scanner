# main.py
import concurrent.futures

from config.settings import RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG
from strategies.rsi_divergence_multi_tf import RsiDivergenceMultiTF
from utils.market_selector import get_top_binance_symbols
from utils.print_signals import print_top_signals


def process_symbol_wrapper(exchange, symbol, strategy):
    """
    wrapper ƒë·ªÉ g·ªçi analyze_symbol c·ªßa strategy v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ k√®m symbol.
    strategy c√≥ th·ªÉ l√† instance cho 1 c·∫∑p lower/higher TF.
    """
    try:
        res = strategy.analyze_symbol(symbol)
        # res l√† dict ho·∫∑c None. N·∫øu c√≥ k·∫øt qu·∫£, b·ªï sung symbol ƒë·∫£m b·∫£o nh·∫•t qu√°n
        if res:
            # ƒë·∫£m b·∫£o c√°c key chu·∫©n t√™n gi·ªëng main c≈©
            out = {
                "symbol": res.get("symbol", symbol),
                "type": res.get("type"),
                "rsi": res.get("rsi"),
                "score": res.get("score"),
                "entry": res.get("entry"),
                "stop_loss": res.get("stop_loss"),
                "take_profit": res.get("take_profit"),
                "rating": res.get("rating", res.get("rating", "")),
                "lower_tf": res.get("lower_tf", strategy.lower_tf),
                "higher_tf": res.get("higher_tf", strategy.higher_tf),
            }
            # In nhanh theo format (v·∫´n in chi ti·∫øt m·ªói khi c√≥ t√≠n hi·ªáu)
            print(
                f"{out['symbol']} | [{out['type']}] ({out['lower_tf']}‚Üí{out['higher_tf']}) "
                f"{out['rating']:^8} score={out['score']:.1f} | RSI={out['rsi']:.1f} | "
                f"Entry={out['entry']:.4f} | SL={out['stop_loss']:.4f} | TP={out['take_profit']:.4f}"
            )
            return out
    except Exception as e:
        if "does not have market symbol" not in str(e):
            # in l·ªói chi ti·∫øt cho debug
            print(f"L·ªói fetch {symbol}: {e}")
    return None


def main():
    print("üöÄ ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng qu√©t ph√¢n k·ª≥ RSI ƒëa khung tr√™n Binance...")

    # ==== 1Ô∏è‚É£ L·∫•y danh s√°ch coin tr√™n Binance (kh√¥ng ƒë·ªïi) ====
    symbols = get_top_binance_symbols(limit=150, source="coingecko")
    print(f"‚úÖ T√¨m th·∫•y {len(symbols)} c·∫∑p coin h·ª£p l·ªá (ƒë√£ lo·∫°i stablecoin).")

    # ==== 2Ô∏è‚É£ Kh·ªüi t·∫°o exchange (ccxt instance) ====
    from ccxt import binance
    exchange = binance()

    # ==== 3Ô∏è‚É£ L·∫∑p qua t·ª´ng c·∫∑p timeframe ƒë∆∞·ª£c c·∫•u h√¨nh trong config ====
    # L∆∞u t·∫•t c·∫£ t√≠n hi·ªáu t·ª´ m·ªçi c·∫∑p v√†o list_all
    list_all = []

    tf_pairs = RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG["timeframe_pairs"]
    for lower_tf, higher_tf in tf_pairs:
        print(f"\nüîé Qu√©t c·∫∑p khung: {lower_tf} ‚Üí {higher_tf} (multithread)...")
        strategy = RsiDivergenceMultiTF(exchange, lower_tf=lower_tf, higher_tf=higher_tf,
                                        expiry_behavior=RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG.get("expiry_behavior",
                                                                                                    "penalize_expired"),
                                        expiry_limit=RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG.get("expiry_limit", 10))

        # ƒëa lu·ªìng qu√©t symbols cho c·∫∑p timeframe hi·ªán t·∫°i
        results = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = {
                executor.submit(process_symbol_wrapper, exchange, symbol, strategy): symbol
                for symbol in symbols
            }
            for fut in concurrent.futures.as_completed(futures):
                r = fut.result()
                if r:
                    results.append(r)

        print(f"‚Üí Ho√†n t·∫•t qu√©t {lower_tf}‚Üí{higher_tf}: t√¨m ƒë∆∞·ª£c {len(results)} t√≠n hi·ªáu.")
        list_all.extend(results)

    # ==== 4Ô∏è‚É£ N·∫øu kh√¥ng c√≥ t√≠n hi·ªáu n√†o ====
    if not list_all:
        print("\n‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán t√≠n hi·ªáu n√†o ·ªü b·∫•t k·ª≥ khung n√†o.")
        return

    # ==== 5Ô∏è‚É£ L·ªçc: ch·ªâ gi·ªØ t√≠n hi·ªáu m·∫°nh nh·∫•t cho m·ªói coin (symbol) ====
    best_per_symbol = {}
    for s in list_all:
        sym = s["symbol"]
        # n·∫øu ch∆∞a c√≥ ho·∫∑c score hi·ªán t·∫°i l·ªõn h∆°n score l∆∞u tr∆∞·ªõc ƒë√≥ -> c·∫≠p nh·∫≠t
        if sym not in best_per_symbol or (s["score"] is not None and s["score"] > best_per_symbol[sym]["score"]):
            best_per_symbol[sym] = s

    top_signals = sorted(best_per_symbol.values(), key=lambda x: x["score"], reverse=True)[:20]

    # ==== 6Ô∏è‚É£ In b·∫£ng ƒë·∫πp ====
    print_top_signals(top_signals)


if __name__ == "__main__":
    main()

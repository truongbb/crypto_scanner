import pandas as pd

from indicators.rsi import compute_rsi
from utils.data_fetcher import fetch_ohlcv


def detect_divergence(df: pd.DataFrame):
    df["rsi"] = compute_rsi(df["close"], period=14)

    signals = []
    for i in range(2, len(df)):
        price_now, price_prev = df["close"].iloc[i], df["close"].iloc[i - 2]
        rsi_now, rsi_prev = df["rsi"].iloc[i], df["rsi"].iloc[i - 2]

        # ---- Bullish divergence ----
        if price_now < price_prev and rsi_now > rsi_prev and rsi_now < 20:
            signals.append({
                "type": "bullish",
                "index": i,
                "price": price_now,
                "rsi": rsi_now
            })

        # ---- Bearish divergence ----
        elif price_now > price_prev and rsi_now < rsi_prev and rsi_now > 80:
            signals.append({
                "type": "bearish",
                "index": i,
                "price": price_now,
                "rsi": rsi_now
            })
    return signals


"""
Ph√°t hi·ªán ph√¢n k·ª≥ RSI (RSI Divergence) ƒë·ªÉ nh·∫≠n bi·∫øt ƒëi·ªÉm ƒë·∫£o chi·ªÅu ti·ªÅm nƒÉng c·ªßa gi√°,
sau ƒë√≥ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng t√≠n hi·ªáu b·∫±ng h·ªá th·ªëng score v√† lo·∫°i b·ªè c√°c t√≠n hi·ªáu ƒë√£ h·∫øt hi·ªáu l·ª±c.

üß© C·∫•u tr√∫c chi·∫øn l∆∞·ª£c
1. D·ªØ li·ªáu ƒë·∫ßu v√†o

N·∫øn OHLCV ƒë∆∞·ª£c l·∫•y t·ª´ s√†n (hi·ªán t·∫°i l√† Binance) qua h√†m fetch_ohlcv().

Timeframe m·∫∑c ƒë·ªãnh: 1h

RSI t√≠nh v·ªõi chu k·ª≥ 14 (compute_rsi(period=14)).

2. Ti√™u ch√≠ ph√°t hi·ªán ph√¢n k·ª≥
üîπ Bullish Divergence (ph√¢n k·ª≥ tƒÉng)

Khi gi√° t·∫°o ƒë√°y th·∫•p h∆°n nh∆∞ng RSI l·∫°i t·∫°o ƒë√°y cao h∆°n.

ƒêi·ªÅu ki·ªán:

price_now < price_prev and rsi_now > rsi_prev and rsi_now < 30


Nghƒ©a l√†:

Gi√° ƒëang gi·∫£m (ƒë√°y m·ªõi th·∫•p h∆°n),

RSI tƒÉng l√™n (ƒë√°y RSI cao h∆°n),

RSI n·∫±m v√πng qu√° b√°n (<30).

‚Üí D·∫•u hi·ªáu th·ªã tr∆∞·ªùng c√≥ th·ªÉ ƒë·∫£o chi·ªÅu tƒÉng.

üîπ Bearish Divergence (ph√¢n k·ª≥ gi·∫£m)

Khi gi√° t·∫°o ƒë·ªânh cao h∆°n nh∆∞ng RSI t·∫°o ƒë·ªânh th·∫•p h∆°n.

ƒêi·ªÅu ki·ªán:

price_now > price_prev and rsi_now < rsi_prev and rsi_now > 70


Nghƒ©a l√†:

Gi√° ƒëang tƒÉng (ƒë·ªânh m·ªõi cao h∆°n),

RSI gi·∫£m xu·ªëng (ƒë·ªânh RSI th·∫•p h∆°n),

RSI n·∫±m v√πng qu√° mua (>70).

‚Üí D·∫•u hi·ªáu th·ªã tr∆∞·ªùng c√≥ th·ªÉ ƒë·∫£o chi·ªÅu gi·∫£m.

3. T√≠nh to√°n v√πng giao d·ªãch (trade levels)

Khi ph√°t hi·ªán ph√¢n k·ª≥, h·ªá th·ªëng l·∫•y c·ª•m 3 c√¢y n·∫øn quanh t√≠n hi·ªáu ƒë·ªÉ x√°c ƒë·ªãnh:

entry = (cluster.high.max() + cluster.low.min()) / 2


R·ªìi t√≠nh:

Bullish

stop_loss = c·ª•m n·∫øn th·∫•p nh·∫•t

take_profit = entry + (entry - stop_loss) * 2

Bearish

stop_loss = c·ª•m n·∫øn cao nh·∫•t

take_profit = entry - (stop_loss - entry) * 2

‚Üí T·ª∑ l·ªá R:R m·∫∑c ƒë·ªãnh = 1:2

4. C√°ch ch·∫•m ƒëi·ªÉm (Scoring system)

M·ªói t√≠n hi·ªáu ƒë∆∞·ª£c ƒë√°nh gi√° b·∫±ng compute_score() theo c√°c y·∫øu t·ªë:

Ti√™u ch√≠	M√¥ t·∫£	ƒêi·ªÉm c·ªông/tr·ª´
‚úÖ Base score	T√≠n hi·ªáu h·ª£p l·ªá	+5
‚úÖ RSI c·ª±c tr·ªã (bullish <20 ho·∫∑c bearish >80)	Ph√¢n k·ª≥ m·∫°nh h∆°n	+3
‚ö†Ô∏è H·∫øt h·∫°n (qu√° 10 n·∫øn)	T√≠n hi·ªáu l·ªói th·ªùi	None (b·ªè qua) ho·∫∑c -2 (n·∫øu d√πng penalize)
‚ö†Ô∏è ƒê·∫°t ‚â• 2R	ƒê√£ ƒë·∫°t m·ª•c ti√™u ‚Üí kh√¥ng c√≤n hi·ªáu l·ª±c	Lo·∫°i b·ªè (None)

üëâ T·ªïng ƒëi·ªÉm cu·ªëi c√πng ƒë∆∞·ª£c l√†m tr√≤n 1 ch·ªØ s·ªë th·∫≠p ph√¢n.

5. ƒêi·ªÅu ki·ªán hi·ªáu l·ª±c t√≠n hi·ªáu (Signal validity)

M·ªôt t√≠n hi·ªáu ƒë∆∞·ª£c gi·ªØ l·∫°i ch·ªâ khi:

Ch∆∞a qu√° 10 c√¢y n·∫øn k·ªÉ t·ª´ khi xu·∫•t hi·ªán, v√†

Ch∆∞a ƒë·∫°t m·ª©c l·ªùi ‚â• 2R.

C√≤n l·∫°i s·∫Ω b·ªã lo·∫°i b·ªè kh·ªèi k·∫øt qu·∫£.

6. K·∫øt qu·∫£ ƒë·∫ßu ra

M·ªói symbol sau khi ph√¢n t√≠ch s·∫Ω tr·∫£ v·ªÅ dict:

{
    "symbol": "BTC/USDT",
    "type": "bullish",
    "price": 62150.5,
    "rsi": 28.3,
    "score": 8.0,
    "entry": 62200.1,
    "stop_loss": 61500.0,
    "take_profit": 63600.2
}


Trong ƒë√≥:

type: bullish / bearish

score: ƒë√°nh gi√° ƒë·ªô m·∫°nh y·∫øu c·ªßa t√≠n hi·ªáu

entry, stop_loss, take_profit: g·ª£i √Ω m·ª©c giao d·ªãch theo c·ª•m n·∫øn ph√¢n k·ª≥

7. C√°ch ch·ªçn t√≠n hi·ªáu t·ªët nh·∫•t tr√™n m·ªói c·∫∑p coin

Trong analyze_symbol():

Duy·ªát t·∫•t c·∫£ t√≠n hi·ªáu ph√°t hi·ªán ƒë∆∞·ª£c trong chu·ªói n·∫øn.

G·ªçi compute_score() ƒë·ªÉ ch·∫•m ƒëi·ªÉm.

L∆∞u l·∫°i t√≠n hi·ªáu c√≥ score cao nh·∫•t c√≤n hi·ªáu l·ª±c.

‚öôÔ∏è T·ªïng k·∫øt logic h·ªá th·ªëng
OHLCV ‚Üí RSI(14) ‚Üí detect_divergence()
                   ‚Üì
         compute_score() v·ªõi:
           + v√πng RSI
           + hi·ªáu l·ª±c t√≠n hi·ªáu
           + ƒë·∫°t 2R hay ch∆∞a
                   ‚Üì
       calculate_trade_levels() ‚Üí entry/sl/tp
                   ‚Üì
   analyze_symbol() ‚Üí t√≠n hi·ªáu t·ªët nh·∫•t (highest score)
"""
class RsiDivergenceDetector:
    def __init__(self, exchange, timeframe="1h", expiry_behavior="ignore_expired", expiry_limit=10):
        self.exchange = exchange
        self.timeframe = timeframe
        self.expiry_behavior = expiry_behavior
        self.expiry_limit = expiry_limit

    def compute_score(self, signal, current_index, df):
        score = 0

        # Base score: 5 cho ph√°t hi·ªán h·ª£p l·ªá
        score += 5

        # C√†ng g·∫ßn v√πng c·ª±c tr·ªã 20/80 th√¨ ƒëi·ªÉm c√†ng cao
        if signal["type"] == "bullish":
            if signal["rsi"] < 20:
                score += 3
        elif signal["type"] == "bearish":
            if signal["rsi"] > 80:
                score += 3

        # === Ki·ªÉm tra hi·ªáu l·ª±c t√≠n hi·ªáu (ƒë√£ n√¢ng c·∫•p) ===
        idx = signal["index"]
        levels = self.calculate_trade_levels(df, signal)
        entry, sl, tp = levels["entry"], levels["stop_loss"], levels["take_profit"]

        # T√≠nh m·ª©c 2R
        r_value = abs(entry - sl)
        tp_2r = entry + 2 * r_value if signal["type"] == "bullish" else entry - 2 * r_value

        # 1Ô∏è‚É£ H·∫øt hi·ªáu l·ª±c n·∫øu qu√° s·ªë n·∫øn quy ƒë·ªãnh
        if (current_index - idx) > self.expiry_limit:
            if self.expiry_behavior == "ignore_expired":
                return None
            elif self.expiry_behavior == "penalize_expired":
                score -= 2
        else:
            # 2Ô∏è‚É£ H·∫øt hi·ªáu l·ª±c n·∫øu ƒë·∫°t ‚â• 2R
            recent_window = df.iloc[idx + 1: min(len(df), idx + self.expiry_limit + 1)]
            if not recent_window.empty:
                if signal["type"] == "bullish":
                    if (recent_window["high"] >= tp_2r).any():
                        return None
                else:
                    if (recent_window["low"] <= tp_2r).any():
                        return None

        return round(score, 1)

    def calculate_trade_levels(self, df, signal):
        """
        T√≠nh entry, stop loss, take profit t·ª´ c·ª•m 3 n·∫øn g·∫ßn nh·∫•t quanh t√≠n hi·ªáu
        """
        idx = signal["index"]
        cluster = df.iloc[max(0, idx - 2): idx + 1]

        entry = (cluster["high"].max() + cluster["low"].min()) / 2

        if signal["type"] == "bullish":
            stop_loss = cluster["low"].min()
            take_profit = entry + (entry - stop_loss) * 2
        else:  # bearish
            stop_loss = cluster["high"].max()
            take_profit = entry - (stop_loss - entry) * 2

        return {
            "entry": entry,
            "stop_loss": stop_loss,
            "take_profit": take_profit
        }

    def analyze_symbol(self, symbol):
        try:
            df = fetch_ohlcv(self.exchange, symbol, self.timeframe)
            signals = detect_divergence(df)
            if not signals:
                return None

            latest_index = len(df) - 1
            best_signal = None
            best_score = -999

            for s in signals:
                score = self.compute_score(s, latest_index, df)
                if score is None:
                    continue
                if score > best_score:
                    best_signal = s
                    best_score = score

            if best_signal:
                levels = self.calculate_trade_levels(df, best_signal)
                return {
                    "symbol": symbol,
                    "type": best_signal["type"],
                    "price": best_signal["price"],
                    "rsi": best_signal["rsi"],
                    "score": best_score,
                    **levels
                }
        except Exception as e:
            if "does not have market symbol" not in str(e):
                print(f"L·ªói fetch {symbol}: {e}")
            return None

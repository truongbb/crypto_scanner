# strategies/rsi_divergence_multi_tf.py
import pandas as pd

from config.rsi_divergence import RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG
from indicators.rsi import compute_rsi
from utils.data_fetcher import fetch_ohlcv


def detect_divergence(df: pd.DataFrame):
    df["rsi"] = compute_rsi(df["close"], period=RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG["rsi_period"])
    signals = []
    for i in range(2, len(df)):
        price_now, price_prev = df["close"].iloc[i], df["close"].iloc[i - 2]
        rsi_now, rsi_prev = df["rsi"].iloc[i], df["rsi"].iloc[i - 2]

        if price_now < price_prev and rsi_now > rsi_prev and rsi_now < 30:
            signals.append({"type": "bullish", "index": i, "price": price_now, "rsi": rsi_now})
        elif price_now > price_prev and rsi_now < rsi_prev and rsi_now > 70:
            signals.append({"type": "bearish", "index": i, "price": price_now, "rsi": rsi_now})
    return signals


"""
üéØ M·ª•c ti√™u

B·∫Øt ph√¢n k·ª≥ RSI khung nh·ªè (v√≠ d·ª• 1h) nh∆∞ng ƒë∆∞·ª£c khung l·ªõn (v√≠ d·ª• 4h) x√°c nh·∫≠n xu h∆∞·ªõng v√† ƒë·ªông l∆∞·ª£ng.
H·ªó tr·ª£ multi-timeframe (c√°c c·∫∑p: ("15m","1h"), ("1h","4h"), ("4h","1d")).

‚öôÔ∏è B·ªô ti√™u ch√≠ RSI Divergence ƒëa khung
Th√†nh ph·∫ßn	M√¥ t·∫£	M·ª•c ti√™u
1Ô∏è‚É£ Khung nh·ªè (entry)	RSI ph√¢n k·ª≥ r√µ r√†ng gi·ªØa gi√° v√† RSI	T√¨m ƒëi·ªÉm ƒë·∫£o chi·ªÅu ti·ªÅm nƒÉng
2Ô∏è‚É£ Khung l·ªõn (confirmation)	EMA(50) ho·∫∑c EMA(20) d·ªëc theo h∆∞·ªõng ph√¢n k·ª≥, v√† RSI 4h h·ªó tr·ª£	X√°c nh·∫≠n ƒë·ªông l∆∞·ª£ng c√πng h∆∞·ªõng
3Ô∏è‚É£ Qu·∫£n l√Ω hi·ªáu l·ª±c t√≠n hi·ªáu	T√≠n hi·ªáu h·∫øt hi·ªáu l·ª±c n·∫øu qu√° 10 n·∫øn ho·∫∑c ƒë·∫°t 2R	Lo·∫°i b·ªè t√≠n hi·ªáu qu√° c≈© ho·∫∑c ƒë√£ ho√†n t·∫•t s√≥ng
4Ô∏è‚É£ Tr·ªçng s·ªë t√≠n hi·ªáu (ƒë·ªô m·∫°nh)	D·ª±a tr√™n 2 khung RSI + EMA trend khung l·ªõn	Ph√¢n lo·∫°i t√≠n hi·ªáu m·∫°nh/y·∫øu
üìà 1. ƒêi·ªÅu ki·ªán RSI Divergence (khung nh·ªè)

Bullish Divergence (ph√¢n k·ª≥ tƒÉng):

Gi√° t·∫°o lower low, RSI t·∫°o higher low

RSI hi·ªán t·∫°i > 30 (tho√°t v√πng qu√° b√°n)

Xu h∆∞·ªõng khung l·ªõn ·ªßng h·ªô (EMA ho·∫∑c RSI)

Bearish Divergence (ph√¢n k·ª≥ gi·∫£m):

Gi√° t·∫°o higher high, RSI t·∫°o lower high

RSI hi·ªán t·∫°i < 70 (tho√°t v√πng qu√° mua)

Xu h∆∞·ªõng khung l·ªõn ·ªßng h·ªô

üß≠ 2. X√°c ƒë·ªãnh xu h∆∞·ªõng khung l·ªõn b·∫±ng EMA linh ho·∫°t (EMA slope)

Thay v√¨ ch·ªâ x√©t ‚Äúgi√° n·∫±m tr√™n/d∆∞·ªõi EMA‚Äù, ta x√©t ƒë·ªô d·ªëc EMA trong 5 c√¢y n·∫øn g·∫ßn nh·∫•t:

ema_slope = ema[-1] - ema[-5]
if ema_slope > 0: trend = "up"
elif ema_slope < 0: trend = "down"
else: trend = "sideways"


‚úÖ ∆Øu ƒëi·ªÉm:

Nh·∫≠n bi·∫øt thay ƒë·ªïi s·ªõm

Gi·∫£m nhi·ªÖu khi gi√° dao ƒë·ªông quanh EMA

Linh ho·∫°t gi·ªØa EMA(20) v√† EMA(50) t√πy khung

üîÅ 3. K·∫øt h·ª£p RSI ƒëa khung (multi-timeframe confirmation)
Tr·∫°ng th√°i	ƒêi·ªÅu ki·ªán	ƒê·ªô m·∫°nh
Strong Buy	1h c√≥ bullish divergence + RSI(4h) ƒëang d∆∞·ªõi 40 v√† EMA(4h) d·ªëc l√™n	‚≠ê‚≠ê‚≠ê
Moderate Buy	1h c√≥ bullish divergence + RSI(4h) n·∫±m gi·ªØa 40‚Äì60 + EMA(4h) ƒëi ngang	‚≠ê‚≠ê
Weak Buy	1h c√≥ bullish divergence + RSI(4h) > 60 (qu√° cao) ho·∫∑c EMA(4h) gi·∫£m nh·∫π	‚≠ê

T∆∞∆°ng t·ª± cho Sell, ch·ªâ ƒë·∫£o ng∆∞·ª£c ƒëi·ªÅu ki·ªán (RSI cao ‚Üí th·∫•p, EMA d·ªëc xu·ªëng).

üß© 4. C·∫•u tr√∫c t·ªïng th·ªÉ c·ªßa chi·∫øn l∆∞·ª£c

Qu√©t RSI ph√¢n k·ª≥ ·ªü khung nh·ªè (1h)

L·∫•y d·ªØ li·ªáu khung l·ªõn (4h):

EMA(20), EMA(50)

RSI(14)

T√≠nh ƒë·ªô d·ªëc EMA ‚Üí x√°c ƒë·ªãnh h∆∞·ªõng trend

X·∫øp h·∫°ng t√≠n hi·ªáu d·ª±a tr√™n ƒë·ªô ƒë·ªìng thu·∫≠n

Lo·∫°i t√≠n hi·ªáu n·∫øu:

Qu√° 10 c√¢y n·∫øn

ƒê√£ ƒë·∫°t ‚â• 2R k·ªÉ t·ª´ entry

üìä 5. V√≠ d·ª• th·ª±c t·∫ø
üü¢ Bullish divergence m·∫°nh

RSI(1h): ph√¢n k·ª≥ tƒÉng, RSI = 35 ‚Üí 50

EMA(4h): d·ªëc l√™n

RSI(4h): = 38 (v√πng th·∫•p)
‚û°Ô∏è X·∫øp lo·∫°i: Strong Buy

üî¥ Bearish divergence y·∫øu

RSI(1h): ph√¢n k·ª≥ gi·∫£m, RSI = 65 ‚Üí 55

EMA(4h): v·∫´n d·ªëc l√™n

RSI(4h): = 65 (v√πng cao)
‚û°Ô∏è X·∫øp lo·∫°i: Weak Sell
"""
class RsiDivergenceMultiTF:
    def __init__(self, exchange, lower_tf="1h", higher_tf="4h", expiry_behavior="penalize_expired", expiry_limit=10):
        cfg = RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG
        self.exchange = exchange
        self.lower_tf = lower_tf
        self.higher_tf = higher_tf
        self.expiry_behavior = expiry_behavior
        self.expiry_limit = expiry_limit
        self.weights = cfg["score_weights"]

    def get_higher_context(self, symbol):
        df_higher = fetch_ohlcv(self.exchange, symbol, self.higher_tf)
        df_higher["rsi"] = compute_rsi(df_higher["close"], period=RSI_DIVERGENCE_MULTI_TF_STRATEGY_CONFIG["rsi_period"])
        df_higher["ema50"] = df_higher["close"].ewm(span=50).mean()
        return df_higher

    def compute_score(self, signal, current_index, df_lower, df_higher):
        w = self.weights
        score = w["base"]

        if signal["type"] == "bullish" and signal["rsi"] < 20:
            score += w["extreme_rsi"]
        elif signal["type"] == "bearish" and signal["rsi"] > 80:
            score += w["extreme_rsi"]

        idx = signal["index"]
        if (current_index - idx) > self.expiry_limit:
            if self.expiry_behavior == "ignore_expired":
                return None
            elif self.expiry_behavior == "penalize_expired":
                score += w["expiry_penalty"]
        else:
            levels = self.calculate_trade_levels(df_lower, signal)
            entry, sl, tp = levels["entry"], levels["stop_loss"], levels["take_profit"]
            r_value = abs(entry - sl)
            tp_2r = entry + 2 * r_value if signal["type"] == "bullish" else entry - 2 * r_value
            window = df_lower.iloc[idx + 1: min(len(df_lower), idx + self.expiry_limit + 1)]
            if not window.empty:
                if signal["type"] == "bullish" and (window["high"] >= tp_2r).any():
                    return None
                elif signal["type"] == "bearish" and (window["low"] <= tp_2r).any():
                    return None

        higher_rsi = df_higher["rsi"].iloc[-1]
        ema_now = df_higher["ema50"].iloc[-1]
        ema_prev = df_higher["ema50"].iloc[-2]

        if signal["type"] == "bullish":
            if higher_rsi < 55 or ema_now > ema_prev:
                score += w["trend_alignment"]
            elif higher_rsi > 70 and ema_now < ema_prev:
                return None
        elif signal["type"] == "bearish":
            if higher_rsi > 45 or ema_now < ema_prev:
                score += w["trend_alignment"]
            elif higher_rsi < 30 and ema_now > ema_prev:
                return None

        return round(score, 1)

    def calculate_trade_levels(self, df, signal):
        idx = signal["index"]
        cluster = df.iloc[max(0, idx - 2): idx + 1]
        entry = (cluster["high"].max() + cluster["low"].min()) / 2

        if signal["type"] == "bullish":
            stop_loss = cluster["low"].min()
            take_profit = entry + (entry - stop_loss) * 2
        else:
            stop_loss = cluster["high"].max()
            take_profit = entry - (stop_loss - entry) * 2

        return {"entry": entry, "stop_loss": stop_loss, "take_profit": take_profit}

    def analyze_symbol(self, symbol):
        try:
            df_lower = fetch_ohlcv(self.exchange, symbol, self.lower_tf)
            signals = detect_divergence(df_lower)
            if not signals:
                return None

            df_higher = self.get_higher_context(symbol)
            latest_index = len(df_lower) - 1
            best_signal, best_score = None, -999

            for s in signals:
                score = self.compute_score(s, latest_index, df_lower, df_higher)
                if score is None:
                    continue
                if score > best_score:
                    best_signal, best_score = s, score

            if best_signal:
                levels = self.calculate_trade_levels(df_lower, best_signal)
                return {
                    "symbol": symbol,
                    "type": best_signal["type"],
                    "price": best_signal["price"],
                    "rsi": best_signal["rsi"],
                    "score": best_score,
                    "lower_tf": self.lower_tf,
                    "higher_tf": self.higher_tf,
                    **levels
                }
        except Exception as e:
            if "does not have market symbol" not in str(e):
                print(f"L·ªói fetch {symbol}: {e}")
            return None
